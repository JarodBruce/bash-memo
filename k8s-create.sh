#!/usr/bin/env bash

function usage() {
cat <<EOF
Usage: command [<options>...] 
(Options must be specified one at a time.)
-------------
Options:
  -h|--help		 show help
  -e             echo "hello world"
  -temp          convert to template 

EOF
}

while [ -n "${1:-}" ]; do
    case "$1" in
        -h|--help) usage; exit 0;;
        -e|--echo) echo "hello world"; exit 0;;
        -temp) echo "convert to template"; temp=1;;
        -*) echo -e 'エラー: 無効なオプションです。「-h」を使用してください。'; exit 1;;
        "") break;;
        *) test="$1";;
    esac
    shift
done

sudo apt update && sudo apt install -y sshpass

vmids=($(qm list | tail -n +2 | awk '{print $1}'))

vmids_list=()
found=0

# 100～993 の連続した7個の空きVMIDを探す
for i in {100..993}; do
    free=1
    for j in {0..6}; do
        if [[ " ${vmids[@]} " =~ " $((i + j)) " ]]; then
            free=0
            break
        fi
    done
    if [[ $free -eq 1 ]]; then
        for j in {0..6}; do
            vmids_list+=( $((i + j)) )
        done
        found=1
        break
    fi
done

echo "vmids_list: ${vmids_list[@]}"
vmid=${vmids_list[0]}

#!/usr/bin/env bash
if [ ! -f debian-10.13.26-20240519-openstack-amd64.qcow2 ]; then
  wget https://cdimage.debian.org/cdimage/openstack/archive/10.13.26-20240519/debian-10.13.26-20240519-openstack-amd64.qcow2
fi

PublicIP=192.168.11.200

cp debian-10.13.26-20240519-openstack-amd64.qcow2 debian-10.13.26-20240519-proxmox-amd64.qcow2

# Create a VM
qm create 9110 --name gateway-01 --memory 2048 --cores 2

# Import the disk in qcow2 format (as unused disk) 
qm importdisk 9110 debian-10.13.26-20240519-proxmox-amd64.qcow2 local-lvm -format raw

# Attach the disk to the vm using VirtIO SCSI
qm set 9110 --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-9110-disk-0

# Important settings
qm set 9110 --ide2 local-lvm:cloudinit --boot c --bootdisk scsi0 --serial0 socket --serial1 socket --vga virtio

# The initial disk is only 2GB, thus we make it larger
qm resize 9110 scsi0 +30G

# user authentication for 'debian' user (optional password)
qm set 9110 --ciuser debian --cipassword debian

# Set the IP configuration for net0
qm set 9110 --ipconfig0 ip=${PublicIP}/24,gw=192.168.11.1
qm set 9110 --net0 model=virtio,bridge=vmbr0
qm set 9110 --nameserver 1.1.1.1

# Set the IP configuration for net1
qm set 9110 --ipconfig1 ip=192.168.8.1/24
qm set 9110 --net1 model=virtio,bridge=vmbr8

# Set keyboard layout to 'jp'
qm set 9110 --keyboard ja

# Create the snippets directory if it doesn't exist
mkdir -p /var/lib/vz/snippets

# Add cloud-init user data to run the setup script
cat <<EOF > /var/lib/vz/snippets/vm-setup.yaml
#cloud-config
users:
  - name: debian
    passwd: $(openssl passwd -1 debian)
    lock_passwd: false
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
runcmd:
  - echo "Starting vm-setup.sh" > /home/debian/cloudinit-status.txt
  - echo "update and install package" > /home/debian/cloudinit-status.txt
  - apt-get update && apt-get upgrade -y
  - apt-get install ssh vim tmux curl ntp -y
  - echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections
  - echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections
  - sudo DEBIAN_FRONTEND=noninteractive apt install -y iptables-persistent
  - systemctl enable ntp && systemctl start ntp
  - systemctl enable ssh && systemctl start ssh
  - echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
  - echo "Setting iptables" > /home/debian/cloudinit-status.txt
  - echo '1' > /proc/sys/net/ipv4/ip_forward
  - |
    cat <<FIREWALL | tee -a /etc/iptables/rules.v4
    # Generated by xtables-save v1.8.2
    *nat
    -A POSTROUTING -o eth0 -j MASQUERADE
    COMMIT

    *filter
    -A INPUT -i lo -j ACCEPT
    -A INPUT -i eth0 -p tcp -m tcp --dport 22 -j ACCEPT
    -A INPUT -i eth0 -p tcp -m tcp --dport 80 -j ACCEPT
    -A INPUT -i eth0 -p tcp -m tcp --dport 443 -j ACCEPT
    -A INPUT -i eth0 -p tcp -m tcp --dport 6443 -j ACCEPT
    -A INPUT -i eth0 -p icmp -j ACCEPT
    -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
    -A INPUT -i eth0 -j DROP
    COMMIT
    FIREWALL
  - iptables-restore < /etc/iptables/rules.v4
  - echo "start k8s-cluster" > /home/debian/cloudinit-status.txt
  - touch /tmp/gateway
  - echo "@reboot echo 'Hello' > /root/test.txt 2>&1" | crontab -

  - echo "change hostname" > /home/debian/cloudinit-status.txt
  - sudo hostnamectl set-hostname gateway-01  && sudo sh -c 'echo 127.0.1.1 gateway-01 >> /etc/hosts'
  - |
    sudo cat <<HOSTS > /etc/hosts
    127.0.0.1 localhost
    192.168.11.200 gateway-01.external gateway-01

    ::1     localhost ip6-localhost ip6-loopback
    ff02::1 ip6-allnodes
    ff02::2 ip6-allrouters

    192.168.8.10 controller-0
    192.168.8.11 controller-1
    192.168.8.12 controller-2
    192.168.8.20 worker-0
    192.168.8.21 worker-1
    192.168.8.22 worker-2
    HOSTS
  - echo "finish vm-setup.sh" > /home/debian/cloudinit-status.txt
  - reboot
EOF

qm set 9110 --cicustom "user=local:snippets/vm-setup.yaml"

# check the cloud-init config
qm cloudinit dump 9110 user

# create template and a linked clone
qm template 9110
qm clone 9110 $vmid --name gateway
qm destroy 9110
qm start $vmid

rm -rf debian-10.13.26-20240519-proxmox-amd64.qcow2

# 前半部分でユーザ名とパスワード用の変数を定義
USERNAME="user"
PASSWORD="user"

# Cloud-init の設定ファイルを編集
cloud_init_config=$(cat <<EOF
#cloud-config

package_upgrade: true
packages:
    - qemu-guest-agent
    - wget
    - curl
    - nano
    - traceroute
    - net-tools
    - sl
    - git
    - cron

#user setup
user: ${USERNAME}
password: ${PASSWORD}
ssh_pwauth: True

timezone: Asia/Tokyo
locale: en_US.utf8
keyboard:
    layout: jp

runcmd:
  - git clone url
EOF
)

cloud_init_path="11_template.cfg"
echo "$cloud_init_config" > ${cloud_init_path}
echo -e ' ' >> ${cloud_init_path}

# イメージファイルのコピー
cp -av /var/lib/vz/template/iso/ubuntu-24.04-server-cloudimg-amd64.img ubuntu-24.04.img
virt-copy-in -a ubuntu-24.04.img  11_template.cfg /etc/cloud/cloud.cfg.d
virt-copy-in -a ubuntu-24.04.img 11_template.cfg /etc/cloud/cloud.cfg.d

# VM の作成
if [ -z "${PVE_CORE}" ]; then
    PVE_CORE=4       # デフォルト値を設定
fi
if [ -z "${PVE_MEMORY}" ]; then
    PVE_MEMORY=4096  # デフォルト値を設定
fi
if [ -z "${PVE_VOLUME}" ]; then
    PVE_VOLUME=20    # デフォルト値を設定
fi

# サンプルで6台のVMを定義
vm_list=(
  "controller-0,192.168.8.10/24"
  "controller-1,192.168.8.11/24"
  "controller-2,192.168.8.12/24"
  "worker-0,192.168.8.20/24"
  "worker-1,192.168.8.21/24"
  "worker-2,192.168.8.22/24"
)
DEFAULT_GATEWAY="192.168.8.1"

for i in "${!vm_list[@]}"; do
  IFS=',' read -r vm_name vm_ip <<< "${vm_list[$i]}"
  echo "Create VM: $vm_name with IP: $vm_ip"
  (
    qm create ${vmids_list[1+$i]} --name "$vm_name" --core ${PVE_CORE} --memory ${PVE_MEMORY} --net0 virtio,bridge=vmbr8
    qm importdisk ${vmids_list[1+$i]} ubuntu-24.04.img local-lvm
    qm set ${vmids_list[1+$i]} --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-${vmids_list[1+$i]}-disk-0
    qm resize ${vmids_list[1+$i]} scsi0 +${PVE_VOLUME}G
    qm set ${vmids_list[1+$i]} --ide2 local-lvm:cloudinit
    qm set ${vmids_list[1+$i]} --boot order=scsi0
    qm set ${vmids_list[1+$i]} --serial0 socket --serial1 socket --vga virtio
    qm set ${vmids_list[1+$i]} --agent enabled=1
    qm set ${vmids_list[1+$i]} --ipconfig0 ip="$vm_ip",gw=${DEFAULT_GATEWAY}
    qm set ${vmids_list[1+$i]} --nameserver 1.1.1.1
  ) &
done

wait

# お行儀よく後片付け
rm 11_template.cfg
rm ubuntu-24.04.img

echo "vmids_list: ${vmids_list[@]}"

for id in "${vmids_list[@]}"; do
    echo "$id"
done

echo "Wait a gateway server setup..."
ssh-keygen -f "/root/.ssh/known_hosts" -R ${PublicIP}
while true; do
    sshpass -p "debian" ssh -o ConnectTimeout=10 -o StrictHostKeyChecking=no debian@${PublicIP} "ls /tmp/gateway" &> /dev/null
    if [ $? -eq 0 ]; then
        echo "Finish the gateway server setup."
        break
    fi
    sleep 1
done

for id in "${vmids_list[@]}"; do
    qm start "$id"
done
